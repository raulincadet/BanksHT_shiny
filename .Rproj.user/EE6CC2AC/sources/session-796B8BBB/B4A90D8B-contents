---
title: "Haitian Banking System"
author: "Raulin L. Cadet"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
    theme: 
      bg: "white"
      fg: "black" 
      primary: "white"
      navbar-bg: "navy"
      base_font: !expr bslib::font_google("Prompt")
      code_font: !expr bslib::font_google("JetBrains Mono")
    
    social: [ "twitter", "facebook", "linkedin" ]
    navbar:
      - { title: "Code", href: "https://github.com/raulincadet/BanksHT_shiny", align: right, icon: fa-github}
     
    
    
runtime: shiny
---


```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
#library(shinydashboard)
library(ggplot2)
library(dplyr)
library(dygraphs)
library(forcats)
##########################333
gtheme<-function(...){
  theme_classic()+
    theme(axis.ticks = element_blank(),
          axis.line=element_blank(),
          axis.text = element_text(colour="black"),
          plot.margin = margin(1,1,1,3)
    )+
    theme(legend.position = "none", legend.direction = "horizontal")

}

##############################
df=read.csv("BalanceSheet_withoutDuplicates.csv")
#### remove '-' in names of parts
df$Parts1_en<-gsub('[-]',' ',df$Parts1_en)
df$Parts2_en<-gsub('[-]',' ',df$Parts2_en)
### remove spaces before and after string
df$Parts1_en<-stringr::str_trim(df$Parts1_en,side='both')
df$Parts2_en<-stringr::str_trim(df$Parts2_en,side='both')
#df_bks=df[,c("BNC","BPH" ,"BUH" ,"CAPITALBK" ,"SOGEBK","UNIBNK","SOGEBL","CBNA",  "SCOTIA","BICH" ,"SOCABK","PROMOBK","SOCABL" ,"BHD..","BHD")]

# To compare the result of total calculated and the one provided by the central bank.
df$Total1=rowSums(df[,c("BNC","BPH" ,"BUH" ,"CAPITALBK" ,"SOGEBK","UNIBNK","SOGEBL","CBNA",  "SCOTIA","BICH" ,"SOCABK","PROMOBK","SOCABL" ,"BHD..","BHD")],na.rm = T)
#df_bks$Date=df$Date;df_bks$Indicators=df$Indicators
##############################################
# verify if the central bank total is the same as mine
table(abs(df$TOTAL-df$Total1)==0)
table(abs(df$TOTAL-df$Total1)<=0.000001) # they are significantly identical
table(abs(df$TOTAL-df$Total1)>=0.000001) # they are significantly identical
#############################################

##################################3
df_income=read.csv("C:/Users/Diaraye/Documents/Raul/GitHub/BanksHT/IncomeStatement_withoutDuplicates.csv")
# To compare the result of total calculated and the one provided by the central bank.
df_income$Total1=rowSums(df_income[,c("BNC","BPH" ,"BUH" ,"CAPITALBK" ,"SOGEBK","UNIBNK","SOGEBL","CBNA",  "SCOTIA","BICH" ,"SOCABK","PROMOBK","SOCABL" ,"BHD..","BHD")],na.rm = T)

# Data will be filtering by Parts2_en to realized geom_bar
df_income$Parts1_en=df_income$Indicators_en
df_income$Parts2_en=df_income$Indicators_en
#df_bks$Date=df$Date;df_bks$Indicators=df$Indicators
##############################################
# verify if the central bank total is the same as mine
table(abs(df_income$TOTAL-df_income$Total)==0) # there is some difference
table(abs(df_income$TOTAL-df_income$Total)<=0.000001) # they are slightly identical
table(abs(df_income$TOTAL-df_income$Total)>=0.000001) # they are sightly identical

####################################
df_employees<-read.csv("C:/Users/Diaraye/Documents/Raul/GitHub/BanksHT/BanksEmployees_withoutDuplicates.csv")

# remove spaces before and after the name of each bank
df_employees$Banks=stringr::str_trim(df_employees$Banks,side='both')
df_employees<-df_employees%>%filter(Banks!="PROMOBK *") # to remove data
# related to that bank which are redundant compared to the name without asterisk.

# remove duplicated rows
df_employees<-df_employees[!duplicated(df_employees),]


##############################################
# arrange df_employees data frame to be structured as df and df_income

df_employees%>%group_by(Date,Banks)%>%summarise(Employees=mean(Indicator,na.rm=T))%>%
  filter(Banks=="PROMOBK")%>%ungroup()%>%summarise(sum(Employees,na.rm = T))
######
df_employees$Banks<-gsub("UNIBK","UNIBNK",df_employees$Banks) # to harmonized the name of this bank to be the same in all data frame.


######
banks_emp=na.omit(unique(df_employees['Banks']))
banks_emp=unique(df_employees['Banks'])
banks_emp=banks_emp[banks_emp!=''] # to remove missing values

femployees<-function(){ # function to structured a new data frame of numbers
                  # of employees to be merged with the other data frame

  bks=NULL
  do=data.frame()
  #colnames(do)=c("Date","Indicator")
  for (i in 1:length(banks_emp)) {
    bks[[i]]=df_employees%>%filter(Banks==banks_emp[i])%>%select(Date,Indicator)
    colnames(bks[[i]])=c("Date",banks_emp[i])
  }
  dat=bks[1]
  for(i in 2:length(banks_emp)){
    dat=merge(dat,bks[i])
    
  }
  return(dat)
}


df_employees2=femployees() # new data frame of numbers of employees by bank and by date

df_employees2$Total1<-rowSums(df_employees2[,banks_emp[banks_emp!="TOTAL"]],na.rm = T)
df_employees2$Indicators=rep("Number of Employees",dim(df_employees2)[1])  
df_employees2$Parts1_fr=rep("Nombre d'Employées",dim(df_employees2)[1])
df_employees2$Parts2_fr=rep("Nombre d'Employées",dim(df_employees2)[1])
df_employees2$Parts1_en=rep("Number of Employees",dim(df_employees2)[1])
df_employees2$Parts2_en=rep("Number of Employees",dim(df_employees2)[1])
df_employees2$Indicators_en=rep("Number of Employees",dim(df_employees2)[1])
##############################################
# verify if the central bank total is the same as mine
table(abs(df_employees2$TOTAL-df_employees2$Total1)==0)
table(abs(df_employees2$TOTAL-df_employees2$Total1)<=0.000001) # they are significantly identical
table(abs(df_employees2$TOTAL-df_employees2$Total1)>=0.000001) # they are not identical. THere are some mistake in the central bank compilation of data
#############
df_employees2$TOTAL=df_employees2$Total1
#############################################
# To retrieve some indicators in df where we store balance sheet data, we should group rows by indicators names using Parts1_en or Parts2_en. However, it is not the case for df_income and df_employee2, where each rows is an indicator. Thus, we can merge df_income and df_employee2

# to compare columns names of the two data frame
colnames(df_employees2) [(colnames(df_employees2) %in% colnames(df_income))==F]
# These banks are not in df_income: "UNIBK" "BIDC"  "BMH". We understand that the spelling of Unibank is different from a data frame to another
colnames(df) # showing that in another data frame the spelling of Univbank acronym is UNIBNK. 
#colnames(df_employees2)<-gsub("UNIBK","UNIBNK",colnames(df_employees2))
df_incomeEmploy=merge(df_income,df_employees2,all = T)
################################################
fvariables_xts<-function(){
  fvariable1<-function(filter){
    dat=df%>%
      select(Date,Parts1_en,Total1)%>%group_by(Parts1_en,Date,)%>%
        summarise(Total1=sum(Total1,na.rm = T))%>%
        filter(Parts1_en==filter)%>%data.frame()
  
    return(dat$Total1
     # xts::xts(dat$Total1,order.by = as.Date(dat$Date))
      
    )
  }
###
  
  fvariable2<-function(filter){
    dat=df%>%
      select(Date,Parts2_en,Total1)%>%group_by(Parts2_en,Date,)%>%
        summarise(Total1=sum(Total1,na.rm = T))%>%
        filter(Parts2_en==filter)%>%data.frame()
  
    return(dat$Total1
      #xts::xts(dat$Total1,order.by = as.Date(dat$Date))
      
    )
  }
##
  lparts1=unique(df$Parts1_en)
  listXTS_parts1=NULL
  for (i in lparts1) {
    listXTS_parts1[[i]]=fvariable1(filter=i)
  }
  ######
  lparts2=c("Liquid asset","Non liquid asset","Deposit","Demand bonds" ,"Term bonds",   "Other liabilities")#unique(df$Parts2_en)
  listXTS_parts2=NULL
  for (i in lparts2) {
    listXTS_parts2[[i]]=fvariable2(filter=i)
  }
  #####
  mergeList<-function(x,y){
  keys <- unique(c(names(x), names(y)))
  setNames(mapply(c, x[keys], y[keys]), keys)
  }
  lu=mergeList(listXTS_parts1,listXTS_parts2)
  colnames(lu)=c(lparts1,lparts2)
  col_lu=colnames(lu)
  lu=cbind.data.frame(lu)
  dates=sort(unique(df$Date))
  fvar_xts<-function(x){
    y=xts::to.quarterly(xts::xts(x,order.by = as.Date(dates)))[,4]
    y=xts::xts(x,order.by = as.Date(dates))
    names(y)=names(x)
    return(y
      #xts::to.quarterly(xts::xts(x,order.by = as.Date(dates)))[,4]
    )
  }
  zo=NULL  
  for (i in 1:length(col_lu)) {
    
      zo[[i]]=fvar_xts(lu[,col_lu[i]])/1000 # in thousand HTG
    
  }
  names(zo)=col_lu  
  return(zo)
}

df_variables=do.call(cbind,fvariables_xts())
indicators_names<-colnames(df_variables)
indicNames<-function(){
  col_names=colnames(df_variables)
  y=NULL
  for (i in col_names) {
    y[i]=gsub('[.]',' ',i)
    
  }
  y
}
########################


#indicators_names=indicNames()
#colnames(df_variables)=indicators_names
########################################################################
#### Build a data frame xts for indicators from the income statement ####
#########################################################################

df_income2<-df_income%>%
  filter(Indicators_en!='Other')

######

fvariables_xts2<-function(){
  fvariable1<-function(filter){
    dat=df_income2%>%
      select(Date,Indicators_en,Total1)%>%group_by(Indicators_en,Date,)%>%
      summarise(Total1=sum(Total1,na.rm = T))%>%
      filter(Indicators_en==filter)%>%data.frame()
    
    return(dat$Total1
           # xts::xts(dat$Total1,order.by = as.Date(dat$Date))
           
    )
  }
  ###
  
  
  ##
  lparts1=unique(df_income2$Indicators_en)
  listXTS_parts1=NULL
  for (i in 1:length(lparts1)) {
    listXTS_parts1[[i]]=fvariable1(filter=lparts1[i])
  }
  listXTS_parts1=as.data.frame(listXTS_parts1)
  colnames(listXTS_parts1)=lparts1
   #################33
  dates=sort(unique(df_income2$Date))
  fvar_xts<-function(x){
    y=xts::to.quarterly(xts::xts(x,order.by = as.Date(dates)))[,4]
    y=xts::xts(x,order.by = as.Date(dates))
    names(y)=names(x)
    return(y
           #xts::to.quarterly(xts::xts(x,order.by = as.Date(dates)))[,4]
    )
  }
  zo=NULL  
  for (i in 1:length(lparts1)) {
    
    zo[[i]]=fvar_xts(listXTS_parts1[,lparts1[i]])/1000 # in thousand HTG
    
  }
  names(zo)=colnames(listXTS_parts1)  
  return(zo)
  #################3
  #return(listXTS_parts1) # return a data frame of total of each variable
  
}

df_incomeXTS=do.call(cbind,fvariables_xts2())

###########################################
### Function to build an xts time series of total of employees by
fvariables_xts3<-function(){
  y=df_employees%>%filter(Banks!='TOTAL')%>%group_by(Date)%>%
    summarise(Total1=sum(Indicator,na.rm = T))
  return(xts::xts(y$Total1,order.by = as.Date(y$Date)))
  
 }
  
  

df_employeesXTS=fvariables_xts3()
colnames(df_employeesXTS)<-"Number of employees"
#colnames(df_employeesXTS)
##########################################
#### MERGING 
# remove unnecessary columns in df_variables
col_variables=unique(c(colnames(df_variables),colnames(df_incomeXTS),colnames(df_employeesXTS)))
df_variables=merge(merge(df_variables,df_incomeXTS,by="Date"),df_employeesXTS, by="Date")
#colnames(df_variables)=col_variables
# select only xts variables necessary. There are some empty columns such as by and by.1 in the data frame.
fdf_col<-function(){
  y=NULL
  for(i in 1:length(col_variables)){
    y[[i]]=df_variables[col_variables]
  }
  return(do.call(cbine,y))
}

indicators_names=colnames(df_variables)
indicators_names=indicators_names[indicators_names!="by"]
indicators_names=indicators_names[indicators_names!="by.1"]
indicators_names=indicators_names[indicators_names!="Allowance.for.bad.debts.1"]
df_variables=df_variables[,indicators_names]
# unnecessary indicators names to remove: they have a digit at their end
fcolumns<-function(x){ # x is a vector of colnames or other strings
  y=NULL
  for(i in 1:length(x)) {
    y[i]=gsub("[.]"," ",x[i] )
      
  }
  return(y)
}
#fcolumns(c("Hello..4","ien","Bello.4","Viva"))
indicators_names=fcolumns(indicators_names)
colnames(df_variables)<-indicators_names
colnames(df_variables)<-gsub("Net profit  loss ","Net profit (loss)",indicators_names)
indicators_names<-colnames(df_variables)
#########################################################################

dates<-as.Date(unique(df$Date))
names(dates)<-as.yearqtr(as.Date(unique(df$Date)))#as.yearmon(as.Date(unique(df$Date)))
dates=sort(dates,decreasing = T)

###3
```



Preamble {.sidebar data-width=350}
-------------------------------------

This dashboard is a personal project to display financial data visualization related to the Haitian banking system. It is not intended for decision-making. The author gives no warranty and accepts no responsibility or liability for the information provided on the dashboard.

Select and indicator (charts 1 and 2)

```{r}
selectInput("indicators", label = "Indicators",
            choices = indicators_names, selected = indicators_names[2])
```

**Select two indicators to compare (chart 3)**

```{r}
selectInput("variable1", label = "Variable 1",
            choices = indicators_names, selected = indicators_names[7])
selectInput("variable2", label = "Variable 2",
            choices = indicators_names, selected = indicators_names[5])
```




Column {data-width=350}
-----------------------------------------------------------------------


### Chart 1
```{r}


renderDygraph(  
  dygraph(df_variables[,input$indicators],main=input$indicators,
          ylab=input$indicators,xlab="Dates")%>%
    dyOptions(colors="green")%>%
    dyRangeSelector()%>%
    dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = FALSE)%>%
    dyOptions(fillGraph = T,colors=c("blue","green"))

)


```

### Chart 3 - Comparison of two indicators

```{r}
renderPlot(
  df_variables%>%
  ggplot(aes(x = get(input$variable1), y = get(input$variable2)))+
 #geom_point(aes(color = get(input$Groups)),size=5)+#
  geom_point(color = "orangered",size=3.5)+#
  geom_smooth(method='lm',se=F,size=1)+
  xlab(input$variable1)+ylab(input$variable2)+
  ggtitle(paste("Relation between",input$variable2,"and",input$variable1))+
   
  theme_classic()+
   theme(legend.position = "none",legend.title = element_blank())
)
```

Column {data-width=375}
-----------------------------------------------------------------------

### Chart 2

```{r}
renderDygraph(
  dygraph(df_variables[,input$indicators]/df_variables$Asset,
          main=paste("Ratio of ",input$indicators,"on Asset"),
          ylab="Purcentages",xlab="Dates")%>%
    dyOptions(colors="blue")%>%
    dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = FALSE)%>%
    dyRangeSelector()#%>%
    #dyOptions(fillGraph = T,colors=c("blue","green"))
  
)

```


### Chart 4 - Comparison of a selected indicators

```{r}
df_bar<-merge(df,df_incomeEmploy,all=T) # merging data related to balance sheet, income statement, noumber of employees

#########################################
#colnames(df_variables) %in% unique(df_bar$Parts1_en)
##############################################
#############################################

findicators<-function(x){ # x is an indicator
  x=gsub('[.]',' ',x)
  banks=banks_emp
  
  y=NULL;bks=NULL
  for(i in banks){
    #if(x %in% unique(df_bar$Parts1_en)){
    if(x %in% indicators_names){
      y[[i]]=df_bar%>%filter(Parts1_en==x)%>%group_by(Date)%>%
        summarise(Total1=sum(get(i)))  # Total1 of the indicator by date for each bank
      bks[[i]]=rep(i,length(y[[i]]))
    }else{
      y[[i]]=df_bar%>%filter(Parts2_en==x)%>%group_by(Date)%>%
        summarise(Total1=sum(get(i)))
      bks[[i]]=rep(i,length(y[[i]]))
    }
  }
  dfi=do.call(rbind,y)
  dfi$Banks=gsub('[0-9.]+', '',rownames(dfi)) # to remove digits and 
  #"." from rownames to identify banks
  dfi
}
renderPlot(
  findicators(input$indicators)%>%filter(Date==input$dates_value)%>%na.omit()%>%
  mutate(Banks = fct_reorder(Banks, Total1)) %>%
  ggplot(aes(x=Banks,y=Total1))+
  ylab("Thousands of HTG")+
  geom_bar(stat = "identity",fill="orangered")+
  coord_flip()+
  geom_text(aes(label=round(Total1)),hjust=-0.1)+
  theme(text = element_text(size=10)) +
  ggtitle(paste(input$indicators, "by bank",sep=" "),
          subtitle = paste("quarterly ended on",substr(input$dates_value,1,7),sep =" "))+
  #labs(title=paste(input$indicators, "by bank - quarterly ended on",substr(input$dates_value,1,7),sep =" "))+
  #theme(plot.margin = unit(c(1,1,1,1), "cm"))
  
  gtheme()
  
)


#View(findicators("Asset"))

  
# colnames(df)
#banks<-c("BNC","BPH" ,"BUH","CAPITALBK","SOGEBK","UNIBNK",
 #        "SOGEBL","CBNA","Total1","SCOTIA","BICH","SOCABK",
  #       "PROMOBK","SOCABL","BHD..","BHD")
```


Column {data-width=50}
------------------------------------

Select a quarterly to display the key indicators of the balance sheet for the whole system.


```{r}
selectInput("dates_value",label = "Date",
            choices = dates,selected=dates[1])
             #min = (min(dates)),max = quarters(max(dates)) , value =max(dates),step = 1)

```

### Equity on Asset

```{r}
renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Equity[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color = "green", icon = "fa-chart-pie")
  
)
```

### Liquidity on Asset

```{r}
renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$`Liquid asset`[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="blue", icon = "fa-usd")
  
)

```

### Loan on Asset

```{r}
renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$`Loan portfolio`[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="orange", icon = "fa-credit-card")
  
)

```

### Deposit on Asset

```{r}

renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Deposit[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="purple", icon = "fa-piggy-bank")
  
)

```

### Deposit in USD on Asset

```{r}

renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$`Deposit in US converted in HTG`[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="maroon", icon = "fa-piggy-bank")
  
)

```



