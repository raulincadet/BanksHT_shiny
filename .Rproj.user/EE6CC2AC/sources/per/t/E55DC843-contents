---
title: "Haitian Banking System"
author: "Raulin L. Cadet"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
    theme: 
      bg: "white"
      fg: "black" 
      primary: "white"
      navbar-bg: "navy"
      base_font: !expr bslib::font_google("Prompt")
      code_font: !expr bslib::font_google("JetBrains Mono")
    
    social: [ "twitter", "facebook", "linkedin" ]
    navbar:
      - { title: "Code", href: "https://github.com/raulincadet/BanksHT_shiny", align: right, icon: fa-github}
     
    
    
runtime: shiny
---


```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
#library(shinydashboard)
library(ggplot2)
library(dplyr)
library(dygraphs)
library(forcats)
##########################333
gtheme<-function(...){
  theme_classic()+
    theme(axis.ticks = element_blank(),
          axis.line=element_blank(),
          axis.text = element_text(colour="black"),
          plot.margin = margin(1,1,1,3)
    )+
    theme(legend.position = "none", legend.direction = "horizontal")

}

##############################
#df=read.csv("C:/Users/Diaraye/Documents/Raul/GitHub/BanksHT/BalanceSheet_withoutDuplicates.csv")
#write.csv(df,"balancesheet.csv",row.names = F)
df=read.csv("BalanceSheet_withoutDuplicates.csv")
#### remove '-' in names of parts
df$Parts1_en<-gsub('[-]',' ',df$Parts1_en)
df$Parts2_en<-gsub('[-]',' ',df$Parts2_en)
### remove spaces before and after string
df$Parts1_en<-stringr::str_trim(df$Parts1_en,side='both')
df$Parts2_en<-stringr::str_trim(df$Parts2_en,side='both')
#df_bks=df[,c("BNC","BPH" ,"BUH" ,"CAPITALBK" ,"SOGEBK","UNIBNK","SOGEBL","CBNA",  "SCOTIA","BICH" ,"SOCABK","PROMOBK","SOCABL" ,"BHD..","BHD")]
df$Total1=rowSums(df[,c("BNC","BPH" ,"BUH" ,"CAPITALBK" ,"SOGEBK","UNIBNK","SOGEBL","CBNA",  "SCOTIA","BICH" ,"SOCABK","PROMOBK","SOCABL" ,"BHD..","BHD")],na.rm = T)
#df_bks$Date=df$Date;df_bks$Indicators=df$Indicators
##############################################
# verify if the central bank total is the same as mine
table(abs(df$TOTAL-df$Total)==0)
table(abs(df$TOTAL-df$Total)<=0.000001) # they are significantly identical
table(abs(df$TOTAL-df$Total)>=0.000001) # they are significantly identical
#############################################

#unique(df$Parts2_en)
#c("Liquid asset","Non-liquid asset","Deposit","Demand bonds" ,"Term bonds",   "Other liabilities")
 
#View(do.call(cbind,list(fvariable1("Asset"),fvariable1("Liability"))) )
##################################3
fvariables_xts<-function(){
  fvariable1<-function(filter){
    dat=df%>%
      select(Date,Parts1_en,Total1)%>%group_by(Parts1_en,Date,)%>%
        summarise(Total1=sum(Total1,na.rm = T))%>%
        filter(Parts1_en==filter)%>%data.frame()
  
    return(dat$Total1
     # xts::xts(dat$Total1,order.by = as.Date(dat$Date))
      
    )
  }
###
  
  fvariable2<-function(filter){
    dat=df%>%
      select(Date,Parts2_en,Total1)%>%group_by(Parts2_en,Date,)%>%
        summarise(Total1=sum(Total1,na.rm = T))%>%
        filter(Parts2_en==filter)%>%data.frame()
  
    return(dat$Total1
      #xts::xts(dat$Total1,order.by = as.Date(dat$Date))
      
    )
  }
##
  lparts1=unique(df$Parts1_en)
  listXTS_parts1=NULL
  for (i in lparts1) {
    listXTS_parts1[[i]]=fvariable1(filter=i)
  }
  ######
  lparts2=c("Liquid asset","Non liquid asset","Deposit","Demand bonds" ,"Term bonds",   "Other liabilities")#unique(df$Parts2_en)
  listXTS_parts2=NULL
  for (i in lparts2) {
    listXTS_parts2[[i]]=fvariable2(filter=i)
  }
  #####
  mergeList<-function(x,y){
  keys <- unique(c(names(x), names(y)))
  setNames(mapply(c, x[keys], y[keys]), keys)
  }
  lu=mergeList(listXTS_parts1,listXTS_parts2)
  colnames(lu)=c(lparts1,lparts2)
  col_lu=colnames(lu)
  lu=cbind.data.frame(lu)
  dates=sort(unique(df$Date))
  fvar_xts<-function(x){
    y=xts::to.quarterly(xts::xts(x,order.by = as.Date(dates)))[,4]
    y=xts::xts(x,order.by = as.Date(dates))
    names(y)=names(x)
    return(y
      #xts::to.quarterly(xts::xts(x,order.by = as.Date(dates)))[,4]
    )
  }
  zo=NULL  
  for (i in 1:length(col_lu)) {
    
      zo[[i]]=fvar_xts(lu[,col_lu[i]])/1000000 # in thousand HTG
    
  }
  names(zo)=col_lu  
  return(zo)
}

df_variables=do.call(cbind,fvariables_xts())
indicators_names<-colnames(df_variables)
indicNames<-function(){
  col_names=colnames(df_variables)
  y=NULL
  for (i in col_names) {
    y[i]=gsub('[.]',' ',i)
    
  }
  y
}
#indicators_names=indicNames()
colnames(df_variables)=indicators_names
#####
#################
dates<-as.Date(unique(df$Date))
names(dates)<-as.yearqtr(as.Date(unique(df$Date)))#as.yearmon(as.Date(unique(df$Date)))
dates=sort(dates,decreasing = T)

###3
```



Preamble {.sidebar data-width=350}
-------------------------------------

This dashboard is a draft version of a personal project to display financial data visualization related to the Haitian banking system. It is not intended for decision-making. The author gives no warranty and accepts no responsibility or liability for the information provided on the dashboard.

Select and indicator (charts 1 and 2)

```{r}
selectInput("indicators", label = "Indicators",
            choices = indicators_names, selected = indicators_names[2])
```

Compare two indicators (chart 3)

```{r}
selectInput("variable1", label = "Variable 1",
            choices = indicators_names, selected = indicators_names[7])
selectInput("variable2", label = "Variable 2",
            choices = indicators_names, selected = indicators_names[5])
```




Column {data-width=350}
-----------------------------------------------------------------------


### Chart 1
```{r}
renderDygraph(  
  dygraph(df_variables[,input$indicators],main=input$indicators,
          ylab=input$indicators,xlab="Dates")%>%
    dyOptions(colors="green")%>%
    dyRangeSelector()%>%
    dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = FALSE)%>%
    dyOptions(fillGraph = T,colors=c("blue","green"))

)


```

### Comparison of two indicators

```{r}
renderPlot(
  df_variables%>%
  ggplot(aes(x = get(input$variable1), y = get(input$variable2)))+
 #geom_point(aes(color = get(input$Groups)),size=5)+#
  geom_point(color = "orangered",size=3.5)+#
  geom_smooth(method='lm',se=F,size=1)+
  xlab(input$variable1)+ylab(input$variable2)+
  ggtitle(paste("Relation between",input$variable2,"and",input$variable1))+
   
  theme_classic()+
   theme(legend.position = "none",legend.title = element_blank())
)
```

Column {data-width=350}
-----------------------------------------------------------------------

### Chart 2

```{r}
renderDygraph(
  dygraph(df_variables[,input$indicators]/df_variables$Asset,
          main=paste("Ratio of ",input$indicators,"on Asset"),
          ylab="Purcentages",xlab="Dates")%>%
    dyOptions(colors="blue")%>%
    dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = FALSE)%>%
    dyRangeSelector()#%>%
    #dyOptions(fillGraph = T,colors=c("blue","green"))
  
)

```


### Chart 4

```{r}
findicators<-function(x){ # x is an indicator
  x=gsub('[.]',' ',x)
  banks<-c("BNC","BPH" ,"BUH","CAPITALBK","SOGEBK","UNIBNK",
         "SOGEBL","CBNA","SCOTIA","BICH","SOCABK",
         "PROMOBK","SOCABL","BHD..","BHD")
  ######
  # remove - in Parts1_en and Parts2_en
  #df$Parts1_en=gsub('[-]'," ",df$Parts1_en)
  #df$Parts2_en=gsub('[-]'," ",df$Parts2_en)
  ######
  y=NULL;bks=NULL
  for(i in banks){
    if(x %in% unique(df$Parts1_en)){
      y[[i]]=df%>%filter(Parts1_en==x)%>%group_by(Date)%>%
        summarise(Total1=sum(get(i)))  # Total1 of the indicator by date for each bank
      bks[[i]]=rep(i,length(y[[i]]))
    }else{
      y[[i]]=df%>%filter(Parts2_en==x)%>%group_by(Date)%>%
        summarise(Total1=sum(get(i)))
      bks[[i]]=rep(i,length(y[[i]]))
    }
  }
  dfi=do.call(rbind,y)
  dfi$Banks=gsub('[0-9.]+', '',rownames(dfi)) # to remove digits and 
  #"." from rownames to identify banks
  dfi
}
renderPlot(
  findicators(input$indicators)%>%filter(Date==input$dates_value)%>%na.omit()%>%
  mutate(Banks = fct_reorder(Banks, Total1)) %>%
  ggplot(aes(x=Banks,y=Total1/1000))+
  ylab("Thousands of HTG")+
  geom_bar(stat = "identity",fill="orangered")+
  coord_flip()+
  geom_text(aes(label=round(Total1/1000)),hjust=-0.2)+
  theme(text = element_text(size=10)) +
  gtheme()
  
)


#View(findicators("Asset"))

  
# colnames(df)
#banks<-c("BNC","BPH" ,"BUH","CAPITALBK","SOGEBK","UNIBNK",
 #        "SOGEBL","CBNA","Total1","SCOTIA","BICH","SOCABK",
  #       "PROMOBK","SOCABL","BHD..","BHD")
```


Column {data-width=50}
------------------------------------

Select a quarterly to display the key indicators of the balance sheet for the whole system.


```{r}
selectInput("dates_value",label = "Date",
            choices = dates,selected=dates[1])
             #min = (min(dates)),max = quarters(max(dates)) , value =max(dates),step = 1)

```

### Equity on Asset

```{r}
renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Equity[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color = "green", icon = "fa-chart-pie")
  
)
```

### Liquidity on Asset

```{r}
renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Liquid.asset[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="blue", icon = "fa-usd")
  
)

```

### Loan on Asset

```{r}
renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Loan.portfolio[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="orange", icon = "fa-credit-card")
  
)

```

### Deposit on Asset

```{r}

renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Deposit[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="purple", icon = "fa-piggy-bank")
  
)

```

### Deposit in USD on Asset

```{r}

renderValueBox(
   
  valueBox(paste(round(as.numeric(df_variables$Deposit.in.US.converted.in.HTG[input$dates_value]/df_variables$Asset[input$dates_value]),digits = 3)*100,"%"),color="maroon", icon = "fa-piggy-bank")
  
)

```



